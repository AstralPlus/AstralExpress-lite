// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class LockEquipmentCsReqOuterClass {
  /**
   * Protobuf type {@code LockEquipmentCsReq}
   */
  public static final class LockEquipmentCsReq extends ProtoMessage<LockEquipmentCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional bool is_protected = 1;</code>
     */
    private boolean isProtected;

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     */
    private final RepeatedInt equipmentIdList = RepeatedInt.newEmptyInstance();

    private LockEquipmentCsReq() {
    }

    /**
     * @return a new empty instance of {@code LockEquipmentCsReq}
     */
    public static LockEquipmentCsReq newInstance() {
      return new LockEquipmentCsReq();
    }

    /**
     * <code>optional bool is_protected = 1;</code>
     * @return whether the isProtected field is set
     */
    public boolean hasIsProtected() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional bool is_protected = 1;</code>
     * @return this
     */
    public LockEquipmentCsReq clearIsProtected() {
      bitField0_ &= ~0x00000001;
      isProtected = false;
      return this;
    }

    /**
     * <code>optional bool is_protected = 1;</code>
     * @return the isProtected
     */
    public boolean getIsProtected() {
      return isProtected;
    }

    /**
     * <code>optional bool is_protected = 1;</code>
     * @param value the isProtected to set
     * @return this
     */
    public LockEquipmentCsReq setIsProtected(final boolean value) {
      bitField0_ |= 0x00000001;
      isProtected = value;
      return this;
    }

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     * @return whether the equipmentIdList field is set
     */
    public boolean hasEquipmentIdList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     * @return this
     */
    public LockEquipmentCsReq clearEquipmentIdList() {
      bitField0_ &= ~0x00000002;
      equipmentIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEquipmentIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getEquipmentIdList() {
      return equipmentIdList;
    }

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableEquipmentIdList() {
      bitField0_ |= 0x00000002;
      return equipmentIdList;
    }

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     * @param value the equipmentIdList to add
     * @return this
     */
    public LockEquipmentCsReq addEquipmentIdList(final int value) {
      bitField0_ |= 0x00000002;
      equipmentIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 equipment_id_list = 8;</code>
     * @param values the equipmentIdList to add
     * @return this
     */
    public LockEquipmentCsReq addAllEquipmentIdList(final int... values) {
      bitField0_ |= 0x00000002;
      equipmentIdList.addAll(values);
      return this;
    }

    @Override
    public LockEquipmentCsReq copyFrom(final LockEquipmentCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        isProtected = other.isProtected;
        equipmentIdList.copyFrom(other.equipmentIdList);
      }
      return this;
    }

    @Override
    public LockEquipmentCsReq mergeFrom(final LockEquipmentCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasIsProtected()) {
        setIsProtected(other.isProtected);
      }
      if (other.hasEquipmentIdList()) {
        getMutableEquipmentIdList().addAll(other.equipmentIdList);
      }
      return this;
    }

    @Override
    public LockEquipmentCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      isProtected = false;
      equipmentIdList.clear();
      return this;
    }

    @Override
    public LockEquipmentCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      equipmentIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof LockEquipmentCsReq)) {
        return false;
      }
      LockEquipmentCsReq other = (LockEquipmentCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasIsProtected() || isProtected == other.isProtected)
        && (!hasEquipmentIdList() || equipmentIdList.equals(other.equipmentIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeBoolNoTag(isProtected);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < equipmentIdList.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(equipmentIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * equipmentIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(equipmentIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public LockEquipmentCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // isProtected
            isProtected = input.readBool();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // equipmentIdList [packed=true]
            input.readPackedUInt32(equipmentIdList, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 64: {
            // equipmentIdList [packed=false]
            tag = input.readRepeatedUInt32(equipmentIdList, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeBool(FieldNames.isProtected, isProtected);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.equipmentIdList, equipmentIdList);
      }
      output.endObject();
    }

    @Override
    public LockEquipmentCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 569879972:
          case -1919645991: {
            if (input.isAtField(FieldNames.isProtected)) {
              if (!input.trySkipNullValue()) {
                isProtected = input.readBool();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 332667783:
          case -1921485935: {
            if (input.isAtField(FieldNames.equipmentIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(equipmentIdList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public LockEquipmentCsReq clone() {
      return new LockEquipmentCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static LockEquipmentCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new LockEquipmentCsReq(), data).checkInitialized();
    }

    public static LockEquipmentCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new LockEquipmentCsReq(), input).checkInitialized();
    }

    public static LockEquipmentCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new LockEquipmentCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating LockEquipmentCsReq messages
     */
    public static MessageFactory<LockEquipmentCsReq> getFactory() {
      return LockEquipmentCsReqFactory.INSTANCE;
    }

    private enum LockEquipmentCsReqFactory implements MessageFactory<LockEquipmentCsReq> {
      INSTANCE;

      @Override
      public LockEquipmentCsReq create() {
        return LockEquipmentCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName isProtected = FieldName.forField("isProtected", "is_protected");

      static final FieldName equipmentIdList = FieldName.forField("equipmentIdList", "equipment_id_list");
    }
  }
}
