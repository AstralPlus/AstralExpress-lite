// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class RogueHandbookAeonOuterClass {
  /**
   * Protobuf type {@code RogueHandbookAeon}
   */
  public static final class RogueHandbookAeon extends ProtoMessage<RogueHandbookAeon> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 aeon_id = 5;</code>
     */
    private int aeonId;

    /**
     * <code>optional uint32 exp = 6;</code>
     */
    private int exp;

    /**
     * <code>optional uint32 level = 10;</code>
     */
    private int level;

    /**
     * <code>optional uint32 max_level = 14;</code>
     */
    private int maxLevel;

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     */
    private final RepeatedInt takenRewardList = RepeatedInt.newEmptyInstance();

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     */
    private final RepeatedInt archiveUnlockList = RepeatedInt.newEmptyInstance();

    private RogueHandbookAeon() {
    }

    /**
     * @return a new empty instance of {@code RogueHandbookAeon}
     */
    public static RogueHandbookAeon newInstance() {
      return new RogueHandbookAeon();
    }

    /**
     * <code>optional uint32 aeon_id = 5;</code>
     * @return whether the aeonId field is set
     */
    public boolean hasAeonId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 aeon_id = 5;</code>
     * @return this
     */
    public RogueHandbookAeon clearAeonId() {
      bitField0_ &= ~0x00000001;
      aeonId = 0;
      return this;
    }

    /**
     * <code>optional uint32 aeon_id = 5;</code>
     * @return the aeonId
     */
    public int getAeonId() {
      return aeonId;
    }

    /**
     * <code>optional uint32 aeon_id = 5;</code>
     * @param value the aeonId to set
     * @return this
     */
    public RogueHandbookAeon setAeonId(final int value) {
      bitField0_ |= 0x00000001;
      aeonId = value;
      return this;
    }

    /**
     * <code>optional uint32 exp = 6;</code>
     * @return whether the exp field is set
     */
    public boolean hasExp() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 exp = 6;</code>
     * @return this
     */
    public RogueHandbookAeon clearExp() {
      bitField0_ &= ~0x00000002;
      exp = 0;
      return this;
    }

    /**
     * <code>optional uint32 exp = 6;</code>
     * @return the exp
     */
    public int getExp() {
      return exp;
    }

    /**
     * <code>optional uint32 exp = 6;</code>
     * @param value the exp to set
     * @return this
     */
    public RogueHandbookAeon setExp(final int value) {
      bitField0_ |= 0x00000002;
      exp = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 10;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 level = 10;</code>
     * @return this
     */
    public RogueHandbookAeon clearLevel() {
      bitField0_ &= ~0x00000004;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 10;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 10;</code>
     * @param value the level to set
     * @return this
     */
    public RogueHandbookAeon setLevel(final int value) {
      bitField0_ |= 0x00000004;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 max_level = 14;</code>
     * @return whether the maxLevel field is set
     */
    public boolean hasMaxLevel() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 max_level = 14;</code>
     * @return this
     */
    public RogueHandbookAeon clearMaxLevel() {
      bitField0_ &= ~0x00000008;
      maxLevel = 0;
      return this;
    }

    /**
     * <code>optional uint32 max_level = 14;</code>
     * @return the maxLevel
     */
    public int getMaxLevel() {
      return maxLevel;
    }

    /**
     * <code>optional uint32 max_level = 14;</code>
     * @param value the maxLevel to set
     * @return this
     */
    public RogueHandbookAeon setMaxLevel(final int value) {
      bitField0_ |= 0x00000008;
      maxLevel = value;
      return this;
    }

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     * @return whether the takenRewardList field is set
     */
    public boolean hasTakenRewardList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     * @return this
     */
    public RogueHandbookAeon clearTakenRewardList() {
      bitField0_ &= ~0x00000010;
      takenRewardList.clear();
      return this;
    }

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTakenRewardList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getTakenRewardList() {
      return takenRewardList;
    }

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableTakenRewardList() {
      bitField0_ |= 0x00000010;
      return takenRewardList;
    }

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     * @param value the takenRewardList to add
     * @return this
     */
    public RogueHandbookAeon addTakenRewardList(final int value) {
      bitField0_ |= 0x00000010;
      takenRewardList.add(value);
      return this;
    }

    /**
     * <pre>
     *  BODAGGMFDMJ
     * </pre>
     *
     * <code>repeated uint32 taken_reward_list = 7;</code>
     * @param values the takenRewardList to add
     * @return this
     */
    public RogueHandbookAeon addAllTakenRewardList(final int... values) {
      bitField0_ |= 0x00000010;
      takenRewardList.addAll(values);
      return this;
    }

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     * @return whether the archiveUnlockList field is set
     */
    public boolean hasArchiveUnlockList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     * @return this
     */
    public RogueHandbookAeon clearArchiveUnlockList() {
      bitField0_ &= ~0x00000020;
      archiveUnlockList.clear();
      return this;
    }

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableArchiveUnlockList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getArchiveUnlockList() {
      return archiveUnlockList;
    }

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableArchiveUnlockList() {
      bitField0_ |= 0x00000020;
      return archiveUnlockList;
    }

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     * @param value the archiveUnlockList to add
     * @return this
     */
    public RogueHandbookAeon addArchiveUnlockList(final int value) {
      bitField0_ |= 0x00000020;
      archiveUnlockList.add(value);
      return this;
    }

    /**
     * <pre>
     *  KPFEEKHKANG
     * </pre>
     *
     * <code>repeated uint32 archive_unlock_list = 15;</code>
     * @param values the archiveUnlockList to add
     * @return this
     */
    public RogueHandbookAeon addAllArchiveUnlockList(final int... values) {
      bitField0_ |= 0x00000020;
      archiveUnlockList.addAll(values);
      return this;
    }

    @Override
    public RogueHandbookAeon copyFrom(final RogueHandbookAeon other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aeonId = other.aeonId;
        exp = other.exp;
        level = other.level;
        maxLevel = other.maxLevel;
        takenRewardList.copyFrom(other.takenRewardList);
        archiveUnlockList.copyFrom(other.archiveUnlockList);
      }
      return this;
    }

    @Override
    public RogueHandbookAeon mergeFrom(final RogueHandbookAeon other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAeonId()) {
        setAeonId(other.aeonId);
      }
      if (other.hasExp()) {
        setExp(other.exp);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasMaxLevel()) {
        setMaxLevel(other.maxLevel);
      }
      if (other.hasTakenRewardList()) {
        getMutableTakenRewardList().addAll(other.takenRewardList);
      }
      if (other.hasArchiveUnlockList()) {
        getMutableArchiveUnlockList().addAll(other.archiveUnlockList);
      }
      return this;
    }

    @Override
    public RogueHandbookAeon clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aeonId = 0;
      exp = 0;
      level = 0;
      maxLevel = 0;
      takenRewardList.clear();
      archiveUnlockList.clear();
      return this;
    }

    @Override
    public RogueHandbookAeon clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      takenRewardList.clear();
      archiveUnlockList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueHandbookAeon)) {
        return false;
      }
      RogueHandbookAeon other = (RogueHandbookAeon) o;
      return bitField0_ == other.bitField0_
        && (!hasAeonId() || aeonId == other.aeonId)
        && (!hasExp() || exp == other.exp)
        && (!hasLevel() || level == other.level)
        && (!hasMaxLevel() || maxLevel == other.maxLevel)
        && (!hasTakenRewardList() || takenRewardList.equals(other.takenRewardList))
        && (!hasArchiveUnlockList() || archiveUnlockList.equals(other.archiveUnlockList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(aeonId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(exp);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(maxLevel);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < takenRewardList.length(); i++) {
          output.writeRawByte((byte) 56);
          output.writeUInt32NoTag(takenRewardList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < archiveUnlockList.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(archiveUnlockList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aeonId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(exp);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(maxLevel);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * takenRewardList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(takenRewardList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * archiveUnlockList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveUnlockList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueHandbookAeon mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // aeonId
            aeonId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // exp
            exp = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // maxLevel
            maxLevel = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // takenRewardList [packed=true]
            input.readPackedUInt32(takenRewardList, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // archiveUnlockList [packed=true]
            input.readPackedUInt32(archiveUnlockList, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 56: {
            // takenRewardList [packed=false]
            tag = input.readRepeatedUInt32(takenRewardList, tag);
            bitField0_ |= 0x00000010;
            break;
          }
          case 120: {
            // archiveUnlockList [packed=false]
            tag = input.readRepeatedUInt32(archiveUnlockList, tag);
            bitField0_ |= 0x00000020;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.aeonId, aeonId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.exp, exp);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.maxLevel, maxLevel);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.takenRewardList, takenRewardList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.archiveUnlockList, archiveUnlockList);
      }
      output.endObject();
    }

    @Override
    public RogueHandbookAeon mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1421249154:
          case -1109029417: {
            if (input.isAtField(FieldNames.aeonId)) {
              if (!input.trySkipNullValue()) {
                aeonId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 100893: {
            if (input.isAtField(FieldNames.exp)) {
              if (!input.trySkipNullValue()) {
                exp = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 390120576:
          case -241235735: {
            if (input.isAtField(FieldNames.maxLevel)) {
              if (!input.trySkipNullValue()) {
                maxLevel = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -600805228:
          case 1027082294: {
            if (input.isAtField(FieldNames.takenRewardList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(takenRewardList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -424348572:
          case 66232508: {
            if (input.isAtField(FieldNames.archiveUnlockList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(archiveUnlockList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueHandbookAeon clone() {
      return new RogueHandbookAeon().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueHandbookAeon parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueHandbookAeon(), data).checkInitialized();
    }

    public static RogueHandbookAeon parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueHandbookAeon(), input).checkInitialized();
    }

    public static RogueHandbookAeon parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueHandbookAeon(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueHandbookAeon messages
     */
    public static MessageFactory<RogueHandbookAeon> getFactory() {
      return RogueHandbookAeonFactory.INSTANCE;
    }

    private enum RogueHandbookAeonFactory implements MessageFactory<RogueHandbookAeon> {
      INSTANCE;

      @Override
      public RogueHandbookAeon create() {
        return RogueHandbookAeon.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aeonId = FieldName.forField("aeonId", "aeon_id");

      static final FieldName exp = FieldName.forField("exp");

      static final FieldName level = FieldName.forField("level");

      static final FieldName maxLevel = FieldName.forField("maxLevel", "max_level");

      static final FieldName takenRewardList = FieldName.forField("takenRewardList", "taken_reward_list");

      static final FieldName archiveUnlockList = FieldName.forField("archiveUnlockList", "archive_unlock_list");
    }
  }
}
